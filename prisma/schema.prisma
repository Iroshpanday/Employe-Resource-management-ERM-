generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Department {
  id         Int                 @id @default(autoincrement())
  name       String
  location   String?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  branches   BranchDepartment[]
}

model Branch {
  id          Int                 @id @default(autoincrement())
  name        String
  location    String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  departments BranchDepartment[]
}

model BranchDepartment {
  id           Int        @id @default(autoincrement())
  branchId     Int
  branch       Branch     @relation(fields: [branchId], references: [id])

  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])

  employees    Employee[]

  @@unique([branchId, departmentId])
}

model Employee {
  id           Int              @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String           @unique
  phone        String?
  hireDate     DateTime         @default(now())
  position     String
  cvFile       String?

  branchDeptId Int
  branchDept   BranchDepartment @relation(fields: [branchDeptId], references: [id])

  user         User?            // 1-1 relation with User

  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  LeaveRequest LeaveRequest[]
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  role       String    @default("EMPLOYEE") // Changed from enum to string
  employee   Employee? @relation(fields: [employeeId], references: [id])

  employeeId Int?      @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("users")
}

model LeaveRequest {
  id          Int      @id @default(autoincrement())
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      String   @default("PENDING") // PENDING, APPROVED, REJECTED
  comments    String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}